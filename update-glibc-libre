#!/usr/bin/env nix-shell
#! nix-shell -i zsh -p zsh gnutar xz git cacert coreutils nawk nixfmt-rfc-style --pure
#
# Copyright © 2025 Barry Schwartz
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License, as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received copies of the GNU General Public License
# along with this program. If not, see
# <https:#www.gnu.org/licenses/>.
#

set -e

program_name="${0}"

function stamp
{
    date +%Y.%m.%d.%H.%M.%S
}

function print_usage
{
    printf "Usage: ${program_name} BRANCH_OR_TAG\n"
    printf "Usage: ${program_name} -- BRANCH_OR_TAG\n"
    printf "       ${program_name}\n"
    printf "       ${program_name} -r REVISION\n"
    printf "       ${program_name} --revision REVISION\n"
    printf "       ${program_name} -h\n"
    printf "       ${program_name} --help\n"
    printf "\n"
    printf "The first and second form check out by branch or\n"
    printf "tag. The third form updates an existing repository’s\n"
    printf "current branch. The fourth and fifth forms check\n"
    printf "out a particular commit, given its hash. The -h\n"
    printf "and --help options print this message.\n"
}

branch=
revision=
if [[ "${1}" = "-h" ]] || [[ "${1}" = "--help" ]]; then
   print_usage
   exit 0
elif [[ 3 -le $# ]]; then
    print_usage
    exit 1
elif [[ $# = 1 ]]; then
    branch="${1:?branch or tag not specified}"
elif [[ $# = 0 ]]; then
    :
elif [[ "${1}" = "--" ]]; then
    branch="${2:?branch or tag not specified}"
elif [[ "${1}" = "-r" ]] || [[ "${1}" = "--revision" ]] ; then
    revision="${2:?revision not specified}"
else
    print_usage
    exit 1
fi

function want_repo_pull
{
    test -z "${branch}${revision}"
}

local_repo="/var/tmp/glibc-libre/nixpkgs"
nixpkgs_url="https://github.com/NixOS/nixpkgs.git"
glibc_subdir="pkgs/development/libraries/glibc"
glibc_in_local_repo="${local_repo}/${glibc_subdir}"
glibc_dir="glibc-libre/glibc"
abs_glibc_dir=`realpath ${PWD}`/"${glibc_dir}"

function local_repo_specifier
{
    if [[ -n "${branch}" ]]; then
        printf "--branch=%s" "${branch}"
    else
        printf "--revision=%s" "${revision}"
    fi
}

function clone_the_local_repo
{
    local dirnm=`dirname "${local_repo}"`
    local basnm=`basename "${local_repo}"`
    local spec=`local_repo_specifier`

    mkdir -p "${dirnm}"
    (cd "${dirnm}" &&
         git clone --depth=1 "${spec}" "${nixpkgs_url}" "${basnm}")
}

function update_the_local_repo
{
    (cd "${local_repo}" && git pull --depth=1)
}

function require_the_local_repo
{
    if ! want_repo_pull; then
        rm -R -f "${local_repo}"
        clone_the_local_repo
    elif [[ -d "${local_repo}" ]]; then
        update_the_local_repo
    else
        print_usage
        exit 1
    fi
}

function obtain_the_glibc_derivation
{
    require_the_local_repo
    mkdir -p "${abs_glibc_dir}"
    cp -R "${glibc_in_local_repo}"/* "${abs_glibc_dir}"
}

function make_a_backup
{
    if [[ -d glibc-libre ]]; then
        tarball=glibc-libre.`stamp`.tar.xz~
        tar --format=posix --acls --xattrs -czf "${tarball}" glibc-libre
    fi
}

function awk_edit
{
    nawk "${1}" < "${2}" > "${2}".tmp && mv "${2}"{.tmp,}
}

function disable_nixonian_patch
{
    awk_edit '/\.\/dont-use-system-ld-so-cache\.patch/ {
                print ("      # NOPE! Exert our freedom, instead.")
                next
              }
              {
                print
              }
             ' "${abs_glibc_dir}"/common.nix
}

function install_ldconfig_for_sure
{
    awk_edit '{
                print
              }
              /moveToOutput bin\/getent \$getent/ {
                print ("")
                print ("      # Be sure ldconfig is installed, and also install")
                print ("      # it as ldconfig-libre. Output both ldconfig and")
                print ("      # ldconfig-libre also as lone outputs. Some may")
                print ("      # find this arrangement helpful for working around")
                print ("      # problems.")
                print ("      cp elf/ldconfig elf/ldconfig-libre")
                print ("      install -d $bin/bin")
                print ("      rm -f $bin/bin/ldconfig")
                print ("      install elf/ldconfig $bin/bin")
                print ("      install elf/ldconfig-libre $bin/bin")
                print ("      install -d $ldconfig/bin")
                print ("      install elf/ldconfig $ldconfig/bin")
                print ("      install -d $ldconfig_libre/bin")
                print ("      install elf/ldconfig-libre $ldconfig_libre/bin")
              }
              /^[[:space:]]*"getent"/ {  # FIXME: This edit could use more context.
                print ("      \"ldconfig\"")
                print ("      \"ldconfig_libre\"")
              }
             ' "${abs_glibc_dir}"/common.nix
}

function edit_for_freedom
{
    disable_nixonian_patch
    install_ldconfig_for_sure
    nixfmt "${abs_glibc_dir}"/common.nix
}

function write_nix_configuration
{
    local config="${1}"
    local deriv_dir=`basename "${abs_glibc_dir}"`

    if true; then
        printf "{ pkgs, ... }:\n"
        printf "\n"
        printf "let\n"
        printf "  glibc-libre =\n"
        printf "    pkgs:\n"
        printf "    (pkgs.callPackage %s {\n" ./"${deriv_dir}"
        printf "      stdenv = pkgs.gccStdenv;\n"
        printf "    });\n"
        printf "in\n"
        printf "{\n"
        printf "  nixpkgs = {\n"
        printf "    overlays = [\n"
        printf "      ( final: prev: { libre = glibc-libre final.pkgs; } )"
        printf "    ];\n"
        printf "  };\n"
        printf "  system = {\n"
        printf "    replaceDependencies = {\n"
        printf "      replacements = [\n"
        printf "        {\n"
        printf "          oldDependency = pkgs.glibc;\n"
        printf "          newDependency = pkgs.libre;\n"
        printf "        }\n"
        printf "      ];\n"
        printf "    };"
        printf "  };\n"
        printf "}\n"
    fi > "${config}"

    nixfmt "${config}"
}

function write_example_etc_config
{
    local config="${1}"

    if true; then
        printf "{\n"
        printf "  pkgs,\n"
        printf "  ...\n"
        printf "}:\n"
        printf "\n"
        printf "let\n"
        printf "  use-nix-ld = false;\n"
        printf "in\n"
        printf "{\n"
        printf "  #\n"
        printf "  # You can install either nix-ld or glibc-libre’s ELF\n"
        printf "  # interpreter itself as the ‘standard’ ELF interpreter.\n"
        printf "  # If you do not use nix-ld, then link or place libraries\n"
        printf "  # you wish to use into a directory listed in\n"
        printf "  # /etc/ld.so.conf and be sure to run ldconfig-libre.\n"
        printf "  # Using glibc-libre directly avoids setting LD_LIBRARY_PATH.\n"
        printf "  #\n"
        printf "  programs.nix-ld = {\n"
        printf "    enable = use-nix-ld;\n"
        printf "    libraries = [ ]; # Put a list of packages here.\n"
        printf "  };\n"
        printf "  environment.ldso =\n"
        printf "    if use-nix-ld then\n"
        printf "      null\n"
        printf "    else\n"
        printf "      \"\${pkgs.libre}/lib/ld-linux-x86-64.so.2\";\n"
        printf "\n"
        printf "  system.activationScripts = {\n"
        printf "    \"update-ld.so.cache\" = ''\n"
        printf "      if ! [ -e /etc/ld.so.conf ]; then\n"
        printf "        if true; then\n"
        printf "          printf \"# Example /etc/ld.so.conf\\\\n\"\n"
        printf "          printf \"\\\\n\"\n"
        printf "          printf \"#/lib  <-- uncomment to include\\\\n\"\n"
        printf "          printf \"#/usr/lib\\\\n\"\n"
        printf "          printf \"#/usr/local/lib\\\\n\"\n"
        printf "        fi > /etc/ld.so.conf\n"
        printf "      fi\n"
        printf "      \${pkgs.libre.bin}/bin/ldconfig-libre\n"
        printf "    '';\n"
        printf "  };\n"
        printf "}\n"
    fi > "${config}"

    nixfmt "${config}"
}

printf "Backing up the previous version.\n"
make_a_backup

printf "Obtaining the glibc derivation.\n"
printf "Local repository at %s\n" "${local_repo}"
rm -R -f glibc-libre
obtain_the_glibc_derivation

printf "Editing for glibc-libre.\n"
edit_for_freedom

printf "Writing Nix configuration.\n"
write_nix_configuration "glibc-libre/libre-configuration.nix"
write_example_etc_config "glibc-libre/libre-etc-config.example.nix"

printf "Done.\n"

# local variables:
# mode: shell-script
# sh-shell: zsh
# coding: utf-8
# indent-tabs-mode: nil
# end:
